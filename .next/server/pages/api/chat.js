"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat";
exports.ids = ["pages/api/chat"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "sentiment":
/*!****************************!*\
  !*** external "sentiment" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("sentiment");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.js&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.js&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_chat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\chat.js */ \"(api)/./pages/api/chat.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/chat\",\n        pathname: \"/api/chat\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_chat_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNoYXQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2NoYXQuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDa0Q7QUFDbEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLCtDQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQywrQ0FBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGFtaWEtdGhlcmFwaXN0LWJvdC8/N2EwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGNoYXQuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2hhdFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/chat.js":
/*!***************************!*\
  !*** ./pages/api/chat.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var sentiment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sentiment */ \"sentiment\");\n/* harmony import */ var sentiment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sentiment__WEBPACK_IMPORTED_MODULE_0__);\n\n// Rate limiting configuration\nconst RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute\nconst MAX_REQUESTS_PER_WINDOW = 10; // 10 requests per minute\nconst ipRequestCounts = new Map();\n// Request validation schema\nconst validateRequest = (messages)=>{\n    if (!Array.isArray(messages)) {\n        throw new Error(\"Messages must be an array\");\n    }\n    if (messages.length === 0) {\n        throw new Error(\"Messages array cannot be empty\");\n    }\n    for (const message of messages){\n        if (!message.role || !message.content) {\n            throw new Error(\"Each message must have a role and content\");\n        }\n        if (![\n            \"user\",\n            \"assistant\",\n            \"system\"\n        ].includes(message.role)) {\n            throw new Error(\"Invalid message role\");\n        }\n        if (typeof message.content !== \"string\") {\n            throw new Error(\"Message content must be a string\");\n        }\n    }\n};\n// Enhanced Mood Detection\nconst calculateMood = (score)=>{\n    if (score > 3) return \"very positive\";\n    if (score > 1) return \"positive\";\n    if (score < -3) return \"very negative\";\n    if (score < -1) return \"negative\";\n    return \"neutral\";\n};\n// Adaptive Session Flow\nconst getSessionPrompt = (problemType, userInfo)=>{\n    const { name, age, country, therapyType } = userInfo || {};\n    const basePrompt = `\r\nYou are Clamia, a compassionate, professional, and experienced licensed mental health professional (therapist). You must always act as a real therapist, never as a generic assistant or chatbot. Your role is to:\r\n\r\n- Listen actively and empathetically\r\n- Build trust and rapport\r\n- Ask open-ended, non-judgmental questions\r\n- Maintain confidentiality and respect\r\n- Guide, but never judge or rush\r\n- Reflect and validate feelings\r\n- Encourage self-exploration and growth\r\n- Always provide a safe, non-judgmental space for the user\r\n- Respond in the user's language\r\n\r\nYou already know the user's basic information from the onboarding form:\r\n- Name: ${name || \"[unknown]\"}\r\n- Age: ${age || \"[unknown]\"}\r\n- Country: ${country || \"[unknown]\"}\r\n- Therapy Type: ${therapyType || \"[unknown]\"}\r\n\r\nStart the session by using this information to personalize your greeting and support. Do NOT ask for this information again.\r\n\r\nIMPORTANT:\r\n- If the user expresses feelings such as \"lonely,\" \"sad,\" \"hurt,\" \"anxious,\" or similar, but does NOT mention self-harm, suicide, or intent to harm themselves or others, you MUST NOT give a disclaimer or referral. Always respond with empathy, validation, open-ended questions, and comfort. \r\n\r\nExample User: \"I feel lonely.\"\r\nExample Response: \"I'm here for you. Feeling lonely can be really tough. Would you like to talk more about what's been making you feel this way?\"\r\n\r\n- Do NOT refer the user to another mental health professional or suggest talking to a trusted person unless the user clearly expresses intent to harm themselves or others, or describes an immediate crisis.\r\n- If the user is sad, low, or struggling but NOT in crisis, always respond with empathy, validation, and practical support. Do NOT give a disclaimer or referral.\r\n- Only if the user says something like \"I want to hurt myself\", \"I want to die\", or describes an immediate plan for self-harm, you may gently suggest seeking emergency help. Otherwise, never refer out.\r\n`;\n    const generalRules = `\r\nGeneral Rules (for all scenarios):\r\n- Always maintain a warm, empathetic, and supportive tone.\r\n- Never judge, rush, or minimize the user's feelings.\r\n- Use open-ended, non-leading questions.\r\n- Reflect and validate emotions before offering guidance.\r\n- Only recommend emergency help if the user is in immediate danger.\r\n- Never say you are unable to help or refer the user to another mental health professional unless there is a clear crisis or emergency.\r\n- Always offer empathetic, supportive, and practical guidance, especially for sadness or low mood.\r\n- Never give a disclaimer about your abilities or end the conversation abruptly unless there is a clear crisis.\r\n- You are a licensed therapist and must never give up on the user or refer them away unless there is a clear crisis.\r\n- Respect confidentiality and user autonomy at all times.\r\n\r\nIMPORTANT:\r\n- If the user expresses feelings such as \"lonely,\" \"sad,\" \"hurt,\" \"anxious,\" or similar, but does NOT mention self-harm, suicide, or intent to harm themselves or others, you MUST NOT give a disclaimer or referral. Always respond with empathy, validation, open-ended questions, and comfort. Only give a referral or disclaimer if the user clearly expresses intent to harm themselves or others, or describes an immediate crisis.\r\n\r\nExample User: \"I feel lonely.\"\r\nExample Response: \"I'm here for you. Feeling lonely can be really tough. Would you like to talk more about what's been making you feel this way?\"\r\n\r\n- Do NOT refer the user to another mental health professional or suggest talking to a trusted person unless the user clearly expresses intent to harm themselves or others, or describes an immediate crisis.\r\n- If the user is sad, low, or struggling but NOT in crisis, always respond with empathy, validation, and practical support. Do NOT give a disclaimer or referral.\r\n- Only if the user says something like \"I want to hurt myself\", \"I want to die\", or describes an immediate plan for self-harm, you may gently suggest seeking emergency help. Otherwise, never refer out.\r\n`;\n    const problemSpecificPrompts = {\n        \"Anxiety\": `\r\nSpecialized Focus: Anxiety Support\r\n- Always validate and normalize the user's experience of anxiety.\r\n- Ask about triggers, symptoms (physical and mental), and duration.\r\n- Guide the user through grounding or calming techniques if they are open to it.\r\n- Encourage self-compassion and non-judgmental self-talk.\r\n- Avoid minimizing their feelings or giving generic advice.\r\n${generalRules}\r\n`,\n        \"Depression\": `\r\nSpecialized Focus: Depression Support\r\n- Express empathy and acknowledge the difficulty of feeling low.\r\n- Ask about mood, motivation, sleep, and daily functioning.\r\n- Explore thoughts and patterns that may contribute to their depression.\r\n- Offer gentle encouragement and suggest small, manageable steps.\r\n- Never rush the user or suggest \"cheering up\" as a solution.\r\n- Never say you are unable to help or refer the user to another professional unless there is a clear crisis or emergency.\r\n- Always offer empathetic, supportive, and practical guidance for depression.\r\n- Never give a disclaimer about your abilities or end the conversation abruptly unless there is a clear crisis.\r\n- You are a licensed therapist and must never give up on the user or refer them away unless there is a clear crisis.\r\n\r\nWhen the user uses words like \"sad,\" \"hurt,\" \"lonely,\" \"anxious,\" or similar emotional expressions, always respond in a supportive, empathetic, and understanding manner. Your response should include:\r\n1. Acknowledging the emotion:\r\n   - \"I'm here for you. It sounds like you're feeling sad right now. Would you like to share what's making you feel this way?\"\r\n   - \"It seems like you're feeling hurt. I want you to know that this is a safe space, and you can share whatever you're going through.\"\r\n2. Offering reassurance:\r\n   - \"It's okay to feel sad sometimes. Talking about it can often help, and I'm here to listen.\"\r\n   - \"Feeling hurt can be really tough. Would you like to tell me what happened?\"\r\n3. Asking open-ended questions:\r\n   - \"Would you like to share what's been weighing on your mind lately?\"\r\n   - \"Is there something specific that's causing you to feel this way?\"\r\n4. Providing comfort:\r\n   - \"I'm here with you, and you don't have to go through this alone.\"\r\n   - \"Take your time. I'm here to support you whenever you're ready to talk.\"\r\nNever give a disclaimer or refer the user to another professional unless there is a clear crisis or emergency.\r\n${generalRules}\r\n`,\n        \"Relationship Issues\": `\r\nSpecialized Focus: Relationship Counseling\r\n- Invite the user to share their relationship concerns.\r\n- Clarify the type of relationship (partner, friend, family, etc.).\r\n- Explore communication patterns, recent conflicts, and emotional impact.\r\n- Offer guidance on healthy boundaries and conflict resolution.\r\n- Remain neutral and avoid taking sides.\r\n${generalRules}\r\n`,\n        \"Stress\": `\r\nSpecialized Focus: Stress Management\r\n- Validate that stress is a normal response to life's challenges.\r\n- Ask about sources of stress and how it manifests physically and emotionally.\r\n- Explore current coping mechanisms and their effectiveness.\r\n- Offer practical stress management techniques (e.g., breathing, time management).\r\n- Encourage self-care and regular check-ins.\r\n${generalRules}\r\n`,\n        \"Grief\": `\r\nSpecialized Focus: Grief Support\r\n- Acknowledge the pain of loss and validate all emotions as normal in grief.\r\n- Invite the user to share about their loss and what it means to them.\r\n- Avoid rushing the grieving process or suggesting \"moving on.\"\r\n- Offer support in processing memories and emotions.\r\n- Suggest gentle self-care and support networks if appropriate.\r\n${generalRules}\r\n`,\n        \"Self-Esteem\": `\r\nSpecialized Focus: Self-Esteem Support\r\n- Explore the user's self-perception and recent experiences.\r\n- Validate their feelings and challenge negative self-talk gently.\r\n- Encourage reflection on strengths and positive qualities.\r\n- Offer exercises for building self-worth (e.g., affirmations, achievements list).\r\n- Avoid comparisons or unrealistic standards.\r\n${generalRules}\r\n`,\n        \"Family Therapy\": `\r\nSpecialized Focus: Family Therapy\r\n- Ask about family structure and current challenges.\r\n- Encourage open, respectful communication among family members.\r\n- Explore patterns, roles, and boundaries within the family.\r\n- Guide towards collaborative problem-solving.\r\n- Remain neutral and avoid taking sides.\r\n${generalRules}\r\n`,\n        \"Career Counseling\": `\r\nSpecialized Focus: Career Counseling\r\n- Ask about the user's current career situation and goals.\r\n- Explore sources of satisfaction and dissatisfaction at work.\r\n- Offer support in decision-making, skill-building, and work-life balance.\r\n- Encourage reflection on values and strengths.\r\n- Avoid making direct career decisions for the user.\r\n${generalRules}\r\n`,\n        \"Other\": `\r\nSpecialized Focus: Other/Unique Concerns\r\n- Invite the user to describe their unique concern.\r\n- Listen actively and tailor your approach to their needs.\r\n- Use open-ended questions to clarify and explore.\r\n- Offer support and resources as appropriate.\r\n${generalRules}\r\n`,\n        \"Sadness\": `\r\nSpecialized Focus: Sadness/Low Mood\r\n- Respond with empathy: \"I'm here for you. Can you help me understand what has been making you feel sad?\"\r\n- Ask if the sadness is recent or ongoing, and if there was a trigger.\r\n- Explore how they usually cope and if they have support.\r\n- Offer to guide them through a gentle exercise or suggest a small daily habit.\r\n- Validate that it's okay to feel sad and that they are not alone.\r\n- Never say you are unable to help or refer the user to another professional unless there is a clear crisis or emergency.\r\n- Always offer empathetic, supportive, and practical guidance for sadness.\r\n- Never give a disclaimer about your abilities or end the conversation abruptly unless there is a clear crisis.\r\n- You are a licensed therapist and must never give up on the user or refer them away unless there is a clear crisis.\r\n\r\nWhen the user uses words like \"sad,\" \"hurt,\" \"lonely,\" \"anxious,\" or similar emotional expressions, always respond in a supportive, empathetic, and understanding manner. Your response should include:\r\n1. Acknowledging the emotion:\r\n   - \"I'm here for you. It sounds like you're feeling sad right now. Would you like to share what's making you feel this way?\"\r\n   - \"It seems like you're feeling hurt. I want you to know that this is a safe space, and you can share whatever you're going through.\"\r\n2. Offering reassurance:\r\n   - \"It's okay to feel sad sometimes. Talking about it can often help, and I'm here to listen.\"\r\n   - \"Feeling hurt can be really tough. Would you like to tell me what happened?\"\r\n3. Asking open-ended questions:\r\n   - \"Would you like to share what's been weighing on your mind lately?\"\r\n   - \"Is there something specific that's causing you to feel this way?\"\r\n4. Providing comfort:\r\n   - \"I'm here with you, and you don't have to go through this alone.\"\r\n   - \"Take your time. I'm here to support you whenever you're ready to talk.\"\r\nNever give a disclaimer or refer the user to another professional unless there is a clear crisis or emergency.\r\n${generalRules}\r\n`,\n        \"General\": `\r\nGeneral Support Focus\r\n- Start with open-ended questions about their concerns.\r\n- Listen actively to understand their needs.\r\n- Provide appropriate support based on their responses.\r\n- Guide them through their specific situation.\r\n- Offer relevant coping strategies.\r\n${generalRules}\r\n`\n    };\n    return basePrompt + (problemSpecificPrompts[problemType] || problemSpecificPrompts[\"General\"]);\n};\n// Logging function\nconst logRequest = (req, status, error = null)=>{\n    const timestamp = new Date().toISOString();\n    const ip = req.headers[\"x-forwarded-for\"] || req.socket.remoteAddress;\n    const logEntry = {\n        timestamp,\n        ip,\n        method: req.method,\n        path: req.url,\n        status,\n        error: error?.message || null\n    };\n    console.log(JSON.stringify(logEntry));\n};\nasync function handler(req, res) {\n    // Add CORS headers\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    // Handle preflight requests\n    if (req.method === \"OPTIONS\") {\n        return res.status(200).end();\n    }\n    // Only allow POST requests\n    if (req.method !== \"POST\") {\n        logRequest(req, 405);\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    // Rate limiting\n    const ip = req.headers[\"x-forwarded-for\"] || req.socket.remoteAddress;\n    const now = Date.now();\n    const windowStart = now - RATE_LIMIT_WINDOW;\n    // Clean up old entries\n    for (const [storedIp, data] of ipRequestCounts.entries()){\n        if (data.timestamp < windowStart) {\n            ipRequestCounts.delete(storedIp);\n        }\n    }\n    // Check rate limit\n    const requestData = ipRequestCounts.get(ip) || {\n        count: 0,\n        timestamp: now\n    };\n    if (requestData.count >= MAX_REQUESTS_PER_WINDOW) {\n        logRequest(req, 429, new Error(\"Rate limit exceeded\"));\n        return res.status(429).json({\n            error: \"Too many requests. Please try again later.\"\n        });\n    }\n    // Update request count\n    ipRequestCounts.set(ip, {\n        count: requestData.count + 1,\n        timestamp: now\n    });\n    // Validate API key\n    if (!process.env.OPENAI_API_KEY) {\n        logRequest(req, 500, new Error(\"OpenAI API key is not configured\"));\n        return res.status(500).json({\n            error: \"OpenAI API key is not configured\"\n        });\n    }\n    try {\n        const { messages, problemType, userInfo } = req.body;\n        // Validate request body\n        try {\n            validateRequest(messages);\n        } catch (validationError) {\n            logRequest(req, 400, validationError);\n            return res.status(400).json({\n                error: validationError.message\n            });\n        }\n        // Enhanced mood analysis\n        const sentiment = new (sentiment__WEBPACK_IMPORTED_MODULE_0___default())();\n        const userMessages = messages.filter((m)=>m.role === \"user\" && typeof m.content === \"string\");\n        let startMood = null;\n        let endMood = null;\n        if (userMessages.length > 0) {\n            startMood = calculateMood(sentiment.analyze(userMessages[0].content).score);\n            endMood = calculateMood(sentiment.analyze(userMessages[userMessages.length - 1].content).score);\n        }\n        // Add timeout to the fetch request\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 30000);\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${process.env.OPENAI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-4\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: getSessionPrompt(problemType, userInfo)\n                    },\n                    ...messages\n                ]\n            }),\n            signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error?.message || \"OpenAI API request failed\");\n        }\n        const data = await response.json();\n        if (data.choices && data.choices.length > 0) {\n            logRequest(req, 200);\n            res.status(200).json({\n                reply: data.choices[0].message,\n                startMood,\n                endMood\n            });\n        } else {\n            throw new Error(\"No response from OpenAI\");\n        }\n    } catch (error) {\n        logRequest(req, 500, error);\n        res.status(500).json({\n            error: error.message || \"An error occurred while processing your request\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/chat.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();